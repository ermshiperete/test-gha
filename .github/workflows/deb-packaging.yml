name: "Ubuntu packaging"
on:
  workflow_dispatch:
#  repository_dispatch:
#    types: ['release-build: *', 'pr-build: *']
env:
  GH_TOKEN: ${{ github.token }}
  COLOR_GREEN: "\e[32m"

jobs:
  sourcepackage:
    name: Build source package
    runs-on: ubuntu-22.04
    outputs:
      VERSION: ${{ steps.version_step.outputs.VERSION }}
      PRERELEASE_TAG: ${{ steps.prerelease_tag.outputs.PRERELEASE_TAG }}
      GIT_SHA: ${{ steps.set_status.outputs.GIT_SHA }}
    steps:
    - name: Checkout
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b #v3.0.2
      with:
        ref: '${{ github.event.client_payload.ref }}'

    - name: Set pending status
      id: set_status
      if: github.event.client_payload.isTestBuild == 'true'
      run: |
        echo "${COLOR_GREEN}Hello world"
        GIT_SHA=$(git rev-parse HEAD)
        echo "GIT_SHA=$GIT_SHA" >> $GITHUB_OUTPUT
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          /repos/$GITHUB_REPOSITORY/statuses/$GIT_SHA \
          -f state='pending' \
        -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
        -f description='Debian packaging started' \
        -f context='continuous-integration/deb-packaging'

    - name: Set version as output parameter
      id: version_step
      shell: bash
      run: |
        echo "${COLOR_GREEN}Foo"
        echo "No color?"
        echo "VERSION=17.0.99" >> $GITHUB_OUTPUT

    - name: Set prerelease tag as output parameter
      id: prerelease_tag
      shell: bash
      run: |
        if [ "${{ github.event.client_payload.isTestBuild }}" == "true" ]; then
          PRERELEASE_TAG="~${{ github.event.client_payload.branch }}-$GITHUB_RUN_NUMBER.$GITHUB_RUN_ATTEMPT"
        else
          PRERELEASE_TAG=""
        fi
        echo "PRERELEASE_TAG=$PRERELEASE_TAG" >> $GITHUB_OUTPUT

    - name: Output which branch or PR we're building plus name of .dsc file
      run: |
        if [ "${{ github.event.client_payload.isTestBuild }}" == "true" ]; then
          echo ":checkered_flag: **Test build of version ${{ steps.version_step.outputs.VERSION }} for ${{ github.event.client_payload.branch }}**" >> $GITHUB_STEP_SUMMARY
        else
          echo ":ship: **Release build of ${{ github.event.client_payload.branch }} branch (${{ github.event.client_payload.ref}}), version ${{ steps.version_step.outputs.VERSION }}**" >> $GITHUB_STEP_SUMMARY
        fi

  binary_packages:
    name: Build binary packages
    needs: sourcepackage
    runs-on: ubuntu-latest
    steps:
      - name: Simulate building
        run: |
          echo "Build binary packages: GITHUB_RUN_ID=${GITHUB_RUN_ID}"
          mkdir artifacts
          echo "${GITHUB_RUN_ID}" > artifacts/README.md

      - name: Store binary packages
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: keyman-binarypkgs-jammy_amd64
          path: |
            artifacts/*
            !artifacts/keyman-srcpkg/
        if: always()

      - name: Save artifacts
        id: artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            artifacts
          key: artifacts-key

  deb_signing:
    name: Sign source and binary packages
    needs: [sourcepackage, binary_packages]
    runs-on: ubuntu-latest
    environment: deploy
    if: github.event.client_payload.isTestBuild == 'false'

    steps:
      - name: Sign packages
        run: echo "Simulate signing packages"

  set_status:
    name: Set result status
    needs: [sourcepackage, binary_packages, deb_signing]
    runs-on: ubuntu-latest
    if: ${{ always() && github.event.client_payload.isTestBuild == 'true' }}
    steps:
    - name: Set success
      if: needs.sourcepackage.result == 'success' && needs.binary_packages.result == 'success' && (needs.deb_signing.result == 'success' || needs.deb_signing.result == 'skipped')
      run: |
        echo "RESULT=success" >> $GITHUB_ENV
        echo "MSG=Package build succeeded" >> $GITHUB_ENV

    - name: Set cancelled
      if: needs.sourcepackage.result == 'cancelled' || needs.binary_packages.result == 'cancelled' || needs.deb_signing.result == 'cancelled'
      run: |
        echo "RESULT=error" >> $GITHUB_ENV
        echo "MSG=Package build cancelled" >> $GITHUB_ENV

    - name: Set failure
      if: needs.sourcepackage.result == 'failure' || needs.binary_packages.result == 'failure' || needs.deb_signing.result == 'failure'
      run: |
        echo "RESULT=failure" >> $GITHUB_ENV
        echo "MSG=Package build failed" >> $GITHUB_ENV

    - name: Set final status
      run: |
        gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          /repos/$GITHUB_REPOSITORY/statuses/${{ needs.sourcepackage.outputs.GIT_SHA }} \
          -f state="$RESULT" \
          -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
          -f description="$MSG" \
          -f context='continuous-integration/deb-packaging'
